<?php
/**
 * CardTransaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CardTransaction Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CardTransaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CardTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'card' => '\Swagger\Client\Model\Card',
        'error' => 'string',
        'fingerprint' => 'string',
        'provider' => 'string',
        'ref_transaction' => 'string',
        'gw_id' => 'string',
        'last_failed' => '\DateTime',
        'first_failed' => '\DateTime',
        'error_state' => 'string',
        'card_type' => 'string',
        'exp_date' => 'string',
        'masked_card' => 'string',
        'strong_authentication_status' => 'string',
        'acquirer_code' => 'string',
        'acquirer_message' => 'string',
        'acquirer_reference' => 'string',
        'text_on_statement' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'card' => null,
        'error' => null,
        'fingerprint' => null,
        'provider' => null,
        'ref_transaction' => null,
        'gw_id' => null,
        'last_failed' => 'date-time',
        'first_failed' => 'date-time',
        'error_state' => null,
        'card_type' => null,
        'exp_date' => null,
        'masked_card' => null,
        'strong_authentication_status' => null,
        'acquirer_code' => null,
        'acquirer_message' => null,
        'acquirer_reference' => null,
        'text_on_statement' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card' => 'card',
        'error' => 'error',
        'fingerprint' => 'fingerprint',
        'provider' => 'provider',
        'ref_transaction' => 'ref_transaction',
        'gw_id' => 'gw_id',
        'last_failed' => 'last_failed',
        'first_failed' => 'first_failed',
        'error_state' => 'error_state',
        'card_type' => 'card_type',
        'exp_date' => 'exp_date',
        'masked_card' => 'masked_card',
        'strong_authentication_status' => 'strong_authentication_status',
        'acquirer_code' => 'acquirer_code',
        'acquirer_message' => 'acquirer_message',
        'acquirer_reference' => 'acquirer_reference',
        'text_on_statement' => 'text_on_statement'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card' => 'setCard',
        'error' => 'setError',
        'fingerprint' => 'setFingerprint',
        'provider' => 'setProvider',
        'ref_transaction' => 'setRefTransaction',
        'gw_id' => 'setGwId',
        'last_failed' => 'setLastFailed',
        'first_failed' => 'setFirstFailed',
        'error_state' => 'setErrorState',
        'card_type' => 'setCardType',
        'exp_date' => 'setExpDate',
        'masked_card' => 'setMaskedCard',
        'strong_authentication_status' => 'setStrongAuthenticationStatus',
        'acquirer_code' => 'setAcquirerCode',
        'acquirer_message' => 'setAcquirerMessage',
        'acquirer_reference' => 'setAcquirerReference',
        'text_on_statement' => 'setTextOnStatement'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card' => 'getCard',
        'error' => 'getError',
        'fingerprint' => 'getFingerprint',
        'provider' => 'getProvider',
        'ref_transaction' => 'getRefTransaction',
        'gw_id' => 'getGwId',
        'last_failed' => 'getLastFailed',
        'first_failed' => 'getFirstFailed',
        'error_state' => 'getErrorState',
        'card_type' => 'getCardType',
        'exp_date' => 'getExpDate',
        'masked_card' => 'getMaskedCard',
        'strong_authentication_status' => 'getStrongAuthenticationStatus',
        'acquirer_code' => 'getAcquirerCode',
        'acquirer_message' => 'getAcquirerMessage',
        'acquirer_reference' => 'getAcquirerReference',
        'text_on_statement' => 'getTextOnStatement'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PROVIDER_REEPAY = 'reepay';
    const PROVIDER_CLEARHAUS = 'clearhaus';
    const PROVIDER_NETS = 'nets';
    const PROVIDER_DIBS = 'dibs';
    const PROVIDER_STRIPE = 'stripe';
    const PROVIDER_QUICKPAY = 'quickpay';
    const PROVIDER_EPAY = 'epay';
    const PROVIDER_TEST = 'test';
    const ERROR_STATE_PENDING = 'pending';
    const ERROR_STATE_SOFT_DECLINED = 'soft_declined';
    const ERROR_STATE_HARD_DECLINED = 'hard_declined';
    const ERROR_STATE_PROCESSING_ERROR = 'processing_error';
    const CARD_TYPE_UNKNOWN = 'unknown';
    const CARD_TYPE_VISA = 'visa';
    const CARD_TYPE_MC = 'mc';
    const CARD_TYPE_DANKORT = 'dankort';
    const CARD_TYPE_VISA_DK = 'visa_dk';
    const CARD_TYPE_FFK = 'ffk';
    const CARD_TYPE_VISA_ELEC = 'visa_elec';
    const CARD_TYPE_MAESTRO = 'maestro';
    const CARD_TYPE_LASER = 'laser';
    const CARD_TYPE_AMEX = 'amex';
    const CARD_TYPE_DINERS = 'diners';
    const CARD_TYPE_DISCOVER = 'discover';
    const CARD_TYPE_JCB = 'jcb';
    const STRONG_AUTHENTICATION_STATUS_THREED_SECURE = 'threed_secure';
    const STRONG_AUTHENTICATION_STATUS_THREED_SECURE_NOT_ENROLLED = 'threed_secure_not_enrolled';
    const STRONG_AUTHENTICATION_STATUS_THREED_SECURE_LOCAL_ONLY = 'threed_secure_local_only';
    const STRONG_AUTHENTICATION_STATUS_SECURED_BY_NETS = 'secured_by_nets';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProviderAllowableValues()
    {
        return [
            self::PROVIDER_REEPAY,
            self::PROVIDER_CLEARHAUS,
            self::PROVIDER_NETS,
            self::PROVIDER_DIBS,
            self::PROVIDER_STRIPE,
            self::PROVIDER_QUICKPAY,
            self::PROVIDER_EPAY,
            self::PROVIDER_TEST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getErrorStateAllowableValues()
    {
        return [
            self::ERROR_STATE_PENDING,
            self::ERROR_STATE_SOFT_DECLINED,
            self::ERROR_STATE_HARD_DECLINED,
            self::ERROR_STATE_PROCESSING_ERROR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardTypeAllowableValues()
    {
        return [
            self::CARD_TYPE_UNKNOWN,
            self::CARD_TYPE_VISA,
            self::CARD_TYPE_MC,
            self::CARD_TYPE_DANKORT,
            self::CARD_TYPE_VISA_DK,
            self::CARD_TYPE_FFK,
            self::CARD_TYPE_VISA_ELEC,
            self::CARD_TYPE_MAESTRO,
            self::CARD_TYPE_LASER,
            self::CARD_TYPE_AMEX,
            self::CARD_TYPE_DINERS,
            self::CARD_TYPE_DISCOVER,
            self::CARD_TYPE_JCB,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStrongAuthenticationStatusAllowableValues()
    {
        return [
            self::STRONG_AUTHENTICATION_STATUS_THREED_SECURE,
            self::STRONG_AUTHENTICATION_STATUS_THREED_SECURE_NOT_ENROLLED,
            self::STRONG_AUTHENTICATION_STATUS_THREED_SECURE_LOCAL_ONLY,
            self::STRONG_AUTHENTICATION_STATUS_SECURED_BY_NETS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['card'] = isset($data['card']) ? $data['card'] : null;
        $this->container['error'] = isset($data['error']) ? $data['error'] : null;
        $this->container['fingerprint'] = isset($data['fingerprint']) ? $data['fingerprint'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['ref_transaction'] = isset($data['ref_transaction']) ? $data['ref_transaction'] : null;
        $this->container['gw_id'] = isset($data['gw_id']) ? $data['gw_id'] : null;
        $this->container['last_failed'] = isset($data['last_failed']) ? $data['last_failed'] : null;
        $this->container['first_failed'] = isset($data['first_failed']) ? $data['first_failed'] : null;
        $this->container['error_state'] = isset($data['error_state']) ? $data['error_state'] : null;
        $this->container['card_type'] = isset($data['card_type']) ? $data['card_type'] : null;
        $this->container['exp_date'] = isset($data['exp_date']) ? $data['exp_date'] : null;
        $this->container['masked_card'] = isset($data['masked_card']) ? $data['masked_card'] : null;
        $this->container['strong_authentication_status'] = isset($data['strong_authentication_status']) ? $data['strong_authentication_status'] : null;
        $this->container['acquirer_code'] = isset($data['acquirer_code']) ? $data['acquirer_code'] : null;
        $this->container['acquirer_message'] = isset($data['acquirer_message']) ? $data['acquirer_message'] : null;
        $this->container['acquirer_reference'] = isset($data['acquirer_reference']) ? $data['acquirer_reference'] : null;
        $this->container['text_on_statement'] = isset($data['text_on_statement']) ? $data['text_on_statement'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProviderAllowableValues();
        if (!is_null($this->container['provider']) && !in_array($this->container['provider'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'provider', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getErrorStateAllowableValues();
        if (!is_null($this->container['error_state']) && !in_array($this->container['error_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'error_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['card_type'] === null) {
            $invalidProperties[] = "'card_type' can't be null";
        }
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!is_null($this->container['card_type']) && !in_array($this->container['card_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'card_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStrongAuthenticationStatusAllowableValues();
        if (!is_null($this->container['strong_authentication_status']) && !in_array($this->container['strong_authentication_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'strong_authentication_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card
     *
     * @return \Swagger\Client\Model\Card
     */
    public function getCard()
    {
        return $this->container['card'];
    }

    /**
     * Sets card
     *
     * @param \Swagger\Client\Model\Card $card Saved card used for transaction. Only present if a saved card was used.
     *
     * @return $this
     */
    public function setCard($card)
    {
        $this->container['card'] = $card;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string $error Error code if failed. See [transaction errors](https://reference.reepay.com/api/#transaction-errors).
     *
     * @return $this
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets fingerprint
     *
     * @return string
     */
    public function getFingerprint()
    {
        return $this->container['fingerprint'];
    }

    /**
     * Sets fingerprint
     *
     * @param string $fingerprint Uniquely identifies this particular card number
     *
     * @return $this
     */
    public function setFingerprint($fingerprint)
    {
        $this->container['fingerprint'] = $fingerprint;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string $provider Acquirer or payment gateway used: `reepay`, `clearhaus`, `nets`, `dibs`, `stripe`, `quickpay`, `epay`, `test`
     *
     * @return $this
     */
    public function setProvider($provider)
    {
        $allowedValues = $this->getProviderAllowableValues();
        if (!is_null($provider) && !in_array($provider, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'provider', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets ref_transaction
     *
     * @return string
     */
    public function getRefTransaction()
    {
        return $this->container['ref_transaction'];
    }

    /**
     * Sets ref_transaction
     *
     * @param string $ref_transaction Id of a possible referenced transaction
     *
     * @return $this
     */
    public function setRefTransaction($ref_transaction)
    {
        $this->container['ref_transaction'] = $ref_transaction;

        return $this;
    }

    /**
     * Gets gw_id
     *
     * @return string
     */
    public function getGwId()
    {
        return $this->container['gw_id'];
    }

    /**
     * Sets gw_id
     *
     * @param string $gw_id Gateway id for card
     *
     * @return $this
     */
    public function setGwId($gw_id)
    {
        $this->container['gw_id'] = $gw_id;

        return $this;
    }

    /**
     * Gets last_failed
     *
     * @return \DateTime
     */
    public function getLastFailed()
    {
        return $this->container['last_failed'];
    }

    /**
     * Sets last_failed
     *
     * @param \DateTime $last_failed When the card transaction last failed, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setLastFailed($last_failed)
    {
        $this->container['last_failed'] = $last_failed;

        return $this;
    }

    /**
     * Gets first_failed
     *
     * @return \DateTime
     */
    public function getFirstFailed()
    {
        return $this->container['first_failed'];
    }

    /**
     * Sets first_failed
     *
     * @param \DateTime $first_failed When the card transaction first failed, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setFirstFailed($first_failed)
    {
        $this->container['first_failed'] = $first_failed;

        return $this;
    }

    /**
     * Gets error_state
     *
     * @return string
     */
    public function getErrorState()
    {
        return $this->container['error_state'];
    }

    /**
     * Sets error_state
     *
     * @param string $error_state Error state if failed: `pending`, `soft_declined`, `hard_declined` or `processing_error`
     *
     * @return $this
     */
    public function setErrorState($error_state)
    {
        $allowedValues = $this->getErrorStateAllowableValues();
        if (!is_null($error_state) && !in_array($error_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'error_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['error_state'] = $error_state;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string $card_type Card type: `unknown`, `visa`, `mc`, `dankort`, `visa_dk`, `ffk`, `visa_elec`, `maestro`, `laser`, `amex`, `diners`, `discover` or `jcb`
     *
     * @return $this
     */
    public function setCardType($card_type)
    {
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!in_array($card_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'card_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets exp_date
     *
     * @return string
     */
    public function getExpDate()
    {
        return $this->container['exp_date'];
    }

    /**
     * Sets exp_date
     *
     * @param string $exp_date Card expire date on form MM-YY
     *
     * @return $this
     */
    public function setExpDate($exp_date)
    {
        $this->container['exp_date'] = $exp_date;

        return $this;
    }

    /**
     * Gets masked_card
     *
     * @return string
     */
    public function getMaskedCard()
    {
        return $this->container['masked_card'];
    }

    /**
     * Sets masked_card
     *
     * @param string $masked_card Masked card number
     *
     * @return $this
     */
    public function setMaskedCard($masked_card)
    {
        $this->container['masked_card'] = $masked_card;

        return $this;
    }

    /**
     * Gets strong_authentication_status
     *
     * @return string
     */
    public function getStrongAuthenticationStatus()
    {
        return $this->container['strong_authentication_status'];
    }

    /**
     * Sets strong_authentication_status
     *
     * @param string $strong_authentication_status Status for strong customer authentication
     *
     * @return $this
     */
    public function setStrongAuthenticationStatus($strong_authentication_status)
    {
        $allowedValues = $this->getStrongAuthenticationStatusAllowableValues();
        if (!is_null($strong_authentication_status) && !in_array($strong_authentication_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'strong_authentication_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['strong_authentication_status'] = $strong_authentication_status;

        return $this;
    }

    /**
     * Gets acquirer_code
     *
     * @return string
     */
    public function getAcquirerCode()
    {
        return $this->container['acquirer_code'];
    }

    /**
     * Sets acquirer_code
     *
     * @param string $acquirer_code Acquirer error code in case of error
     *
     * @return $this
     */
    public function setAcquirerCode($acquirer_code)
    {
        $this->container['acquirer_code'] = $acquirer_code;

        return $this;
    }

    /**
     * Gets acquirer_message
     *
     * @return string
     */
    public function getAcquirerMessage()
    {
        return $this->container['acquirer_message'];
    }

    /**
     * Sets acquirer_message
     *
     * @param string $acquirer_message Acquirer message in case of error
     *
     * @return $this
     */
    public function setAcquirerMessage($acquirer_message)
    {
        $this->container['acquirer_message'] = $acquirer_message;

        return $this;
    }

    /**
     * Gets acquirer_reference
     *
     * @return string
     */
    public function getAcquirerReference()
    {
        return $this->container['acquirer_reference'];
    }

    /**
     * Sets acquirer_reference
     *
     * @param string $acquirer_reference Acquirer reference to transaction. E.g. Nets order id or Clearhaus reference.
     *
     * @return $this
     */
    public function setAcquirerReference($acquirer_reference)
    {
        $this->container['acquirer_reference'] = $acquirer_reference;

        return $this;
    }

    /**
     * Gets text_on_statement
     *
     * @return string
     */
    public function getTextOnStatement()
    {
        return $this->container['text_on_statement'];
    }

    /**
     * Sets text_on_statement
     *
     * @param string $text_on_statement Resulting text on bank statement if known
     *
     * @return $this
     */
    public function setTextOnStatement($text_on_statement)
    {
        $this->container['text_on_statement'] = $text_on_statement;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


