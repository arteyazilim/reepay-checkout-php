<?php
/**
 * CreateSubscription
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreateSubscription Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateSubscription implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateSubscription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amount' => 'int',
        'quantity' => 'int',
        'discounts' => '\Swagger\Client\Model\CreateSubscriptionDiscount[]',
        'add_ons' => '\Swagger\Client\Model\CreateSubscriptionAddOn[]',
        'additional_costs' => '\Swagger\Client\Model\CreateSubscriptionAdditionalCost[]',
        'amount_incl_vat' => 'bool',
        'grace_duration' => 'int',
        'no_trial' => 'bool',
        'no_setup_fee' => 'bool',
        'conditional_create' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'amount' => 'int32',
        'quantity' => 'int32',
        'discounts' => null,
        'add_ons' => null,
        'additional_costs' => null,
        'amount_incl_vat' => null,
        'grace_duration' => 'int64',
        'no_trial' => null,
        'no_setup_fee' => null,
        'conditional_create' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'quantity' => 'quantity',
        'discounts' => 'discounts',
        'add_ons' => 'add_ons',
        'additional_costs' => 'additional_costs',
        'amount_incl_vat' => 'amount_incl_vat',
        'grace_duration' => 'grace_duration',
        'no_trial' => 'no_trial',
        'no_setup_fee' => 'no_setup_fee',
        'conditional_create' => 'conditional_create'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'quantity' => 'setQuantity',
        'discounts' => 'setDiscounts',
        'add_ons' => 'setAddOns',
        'additional_costs' => 'setAdditionalCosts',
        'amount_incl_vat' => 'setAmountInclVat',
        'grace_duration' => 'setGraceDuration',
        'no_trial' => 'setNoTrial',
        'no_setup_fee' => 'setNoSetupFee',
        'conditional_create' => 'setConditionalCreate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'quantity' => 'getQuantity',
        'discounts' => 'getDiscounts',
        'add_ons' => 'getAddOns',
        'additional_costs' => 'getAdditionalCosts',
        'amount_incl_vat' => 'getAmountInclVat',
        'grace_duration' => 'getGraceDuration',
        'no_trial' => 'getNoTrial',
        'no_setup_fee' => 'getNoSetupFee',
        'conditional_create' => 'getConditionalCreate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['discounts'] = isset($data['discounts']) ? $data['discounts'] : null;
        $this->container['add_ons'] = isset($data['add_ons']) ? $data['add_ons'] : null;
        $this->container['additional_costs'] = isset($data['additional_costs']) ? $data['additional_costs'] : null;
        $this->container['amount_incl_vat'] = isset($data['amount_incl_vat']) ? $data['amount_incl_vat'] : null;
        $this->container['grace_duration'] = isset($data['grace_duration']) ? $data['grace_duration'] : null;
        $this->container['no_trial'] = isset($data['no_trial']) ? $data['no_trial'] : null;
        $this->container['no_setup_fee'] = isset($data['no_setup_fee']) ? $data['no_setup_fee'] : null;
        $this->container['conditional_create'] = isset($data['conditional_create']) ? $data['conditional_create'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['amount']) && ($this->container['amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['quantity']) && ($this->container['quantity'] < 1)) {
            $invalidProperties[] = "invalid value for 'quantity', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['grace_duration']) && ($this->container['grace_duration'] < 0)) {
            $invalidProperties[] = "invalid value for 'grace_duration', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Optional custom per quantity plan price. If provided the plan price billed for each billing period will be overridden by this price.
     *
     * @return $this
     */
    public function setAmount($amount)
    {

        if (!is_null($amount) && ($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling CreateSubscription., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Optional quantity of the plan product for this subscription. If not provided the default is the default plan quantity defined for the plan.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {

        if (!is_null($quantity) && ($quantity < 1)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling CreateSubscription., must be bigger than or equal to 1.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets discounts
     *
     * @return \Swagger\Client\Model\CreateSubscriptionDiscount[]
     */
    public function getDiscounts()
    {
        return $this->container['discounts'];
    }

    /**
     * Sets discounts
     *
     * @param \Swagger\Client\Model\CreateSubscriptionDiscount[] $discounts Discounts to attach to subscription
     *
     * @return $this
     */
    public function setDiscounts($discounts)
    {
        $this->container['discounts'] = $discounts;

        return $this;
    }

    /**
     * Gets add_ons
     *
     * @return \Swagger\Client\Model\CreateSubscriptionAddOn[]
     */
    public function getAddOns()
    {
        return $this->container['add_ons'];
    }

    /**
     * Sets add_ons
     *
     * @param \Swagger\Client\Model\CreateSubscriptionAddOn[] $add_ons Add-ons to attach to subscription. The same add-on can only be attached to subscription once unless unique handles are supplied for the subscription add-on.
     *
     * @return $this
     */
    public function setAddOns($add_ons)
    {
        $this->container['add_ons'] = $add_ons;

        return $this;
    }

    /**
     * Gets additional_costs
     *
     * @return \Swagger\Client\Model\CreateSubscriptionAdditionalCost[]
     */
    public function getAdditionalCosts()
    {
        return $this->container['additional_costs'];
    }

    /**
     * Sets additional_costs
     *
     * @param \Swagger\Client\Model\CreateSubscriptionAdditionalCost[] $additional_costs Additional costs to add to subscription at creation time
     *
     * @return $this
     */
    public function setAdditionalCosts($additional_costs)
    {
        $this->container['additional_costs'] = $additional_costs;

        return $this;
    }

    /**
     * Gets amount_incl_vat
     *
     * @return bool
     */
    public function getAmountInclVat()
    {
        return $this->container['amount_incl_vat'];
    }

    /**
     * Sets amount_incl_vat
     *
     * @param bool $amount_incl_vat Whether the optional amount is including VAT. Defaults to true.
     *
     * @return $this
     */
    public function setAmountInclVat($amount_incl_vat)
    {
        $this->container['amount_incl_vat'] = $amount_incl_vat;

        return $this;
    }

    /**
     * Gets grace_duration
     *
     * @return int
     */
    public function getGraceDuration()
    {
        return $this->container['grace_duration'];
    }

    /**
     * Sets grace_duration
     *
     * @param int $grace_duration A grace duration in seconds from the creation of a subscription where no dunning process is started for a failing invoice. This allows a certain amount of time for the customer to sign up with a payment method.
     *
     * @return $this
     */
    public function setGraceDuration($grace_duration)
    {

        if (!is_null($grace_duration) && ($grace_duration < 0)) {
            throw new \InvalidArgumentException('invalid value for $grace_duration when calling CreateSubscription., must be bigger than or equal to 0.');
        }

        $this->container['grace_duration'] = $grace_duration;

        return $this;
    }

    /**
     * Gets no_trial
     *
     * @return bool
     */
    public function getNoTrial()
    {
        return $this->container['no_trial'];
    }

    /**
     * Sets no_trial
     *
     * @param bool $no_trial Override plan trial settings and disable trial
     *
     * @return $this
     */
    public function setNoTrial($no_trial)
    {
        $this->container['no_trial'] = $no_trial;

        return $this;
    }

    /**
     * Gets no_setup_fee
     *
     * @return bool
     */
    public function getNoSetupFee()
    {
        return $this->container['no_setup_fee'];
    }

    /**
     * Sets no_setup_fee
     *
     * @param bool $no_setup_fee Override plan setup fee settings and disable fee
     *
     * @return $this
     */
    public function setNoSetupFee($no_setup_fee)
    {
        $this->container['no_setup_fee'] = $no_setup_fee;

        return $this;
    }

    /**
     * Gets conditional_create
     *
     * @return bool
     */
    public function getConditionalCreate()
    {
        return $this->container['conditional_create'];
    }

    /**
     * Sets conditional_create
     *
     * @param bool $conditional_create If the subscription is eligible to bill for the first period right away, this option will make the creation conditional on a successful payment of the first invoice. Default is false.
     *
     * @return $this
     */
    public function setConditionalCreate($conditional_create)
    {
        $this->container['conditional_create'] = $conditional_create;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


