<?php
/**
 * SessionPaymentMethod
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SessionPaymentMethod Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SessionPaymentMethod implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SessionPaymentMethod';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'card_type' => 'string',
        'sca_rule' => 'string',
        'sca_fallback' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'card_type' => null,
        'sca_rule' => null,
        'sca_fallback' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'card_type' => 'card_type',
        'sca_rule' => 'sca_rule',
        'sca_fallback' => 'sca_fallback'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'card_type' => 'setCardType',
        'sca_rule' => 'setScaRule',
        'sca_fallback' => 'setScaFallback'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'card_type' => 'getCardType',
        'sca_rule' => 'getScaRule',
        'sca_fallback' => 'getScaFallback'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_CARD = 'CARD';
    const TYPE_APPLEPAY = 'APPLEPAY';
    const TYPE_GOOGLEPAY = 'GOOGLEPAY';
    const TYPE_PAYPAL = 'PAYPAL';
    const TYPE_VIABILL = 'VIABILL';
    const TYPE_MOBILEPAY = 'MOBILEPAY';
    const TYPE_MOBILEPAY_SUBSCRIPTION = 'MOBILEPAY_SUBSCRIPTION';
    const TYPE_KLARNA_PAY_NOW = 'KLARNA_PAY_NOW';
    const TYPE_KLARNA_PAY_LATER = 'KLARNA_PAY_LATER';
    const TYPE_RESURS = 'RESURS';
    const TYPE_MANUAL = 'MANUAL';
    const CARD_TYPE_UNKNOWN = 'UNKNOWN';
    const CARD_TYPE_VISA = 'VISA';
    const CARD_TYPE_MC = 'MC';
    const CARD_TYPE_DANKORT = 'DANKORT';
    const CARD_TYPE_VISA_DK = 'VISA_DK';
    const CARD_TYPE_FFK = 'FFK';
    const CARD_TYPE_VISA_ELEC = 'VISA_ELEC';
    const CARD_TYPE_MAESTRO = 'MAESTRO';
    const CARD_TYPE_LASER = 'LASER';
    const CARD_TYPE_AMEX = 'AMEX';
    const CARD_TYPE_DINERS = 'DINERS';
    const CARD_TYPE_DISCOVER = 'DISCOVER';
    const CARD_TYPE_JCB = 'JCB';
    const CARD_TYPE_CHINA_UNION_PAY = 'CHINA_UNION_PAY';
    const SCA_RULE_USE_SCA_IF_AVAILABLE_PREAUTH = 'USE_SCA_IF_AVAILABLE_PREAUTH';
    const SCA_RULE_USE_SCA_IF_AVAILABLE_AUTH = 'USE_SCA_IF_AVAILABLE_AUTH';
    const SCA_RULE_MUST_USE_SCA_PREAUTH = 'MUST_USE_SCA_PREAUTH';
    const SCA_RULE_MUST_USE_SCA_AUTH = 'MUST_USE_SCA_AUTH';
    const SCA_RULE_DO_NOT_USE_SCA = 'DO_NOT_USE_SCA';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CARD,
            self::TYPE_APPLEPAY,
            self::TYPE_GOOGLEPAY,
            self::TYPE_PAYPAL,
            self::TYPE_VIABILL,
            self::TYPE_MOBILEPAY,
            self::TYPE_MOBILEPAY_SUBSCRIPTION,
            self::TYPE_KLARNA_PAY_NOW,
            self::TYPE_KLARNA_PAY_LATER,
            self::TYPE_RESURS,
            self::TYPE_MANUAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardTypeAllowableValues()
    {
        return [
            self::CARD_TYPE_UNKNOWN,
            self::CARD_TYPE_VISA,
            self::CARD_TYPE_MC,
            self::CARD_TYPE_DANKORT,
            self::CARD_TYPE_VISA_DK,
            self::CARD_TYPE_FFK,
            self::CARD_TYPE_VISA_ELEC,
            self::CARD_TYPE_MAESTRO,
            self::CARD_TYPE_LASER,
            self::CARD_TYPE_AMEX,
            self::CARD_TYPE_DINERS,
            self::CARD_TYPE_DISCOVER,
            self::CARD_TYPE_JCB,
            self::CARD_TYPE_CHINA_UNION_PAY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScaRuleAllowableValues()
    {
        return [
            self::SCA_RULE_USE_SCA_IF_AVAILABLE_PREAUTH,
            self::SCA_RULE_USE_SCA_IF_AVAILABLE_AUTH,
            self::SCA_RULE_MUST_USE_SCA_PREAUTH,
            self::SCA_RULE_MUST_USE_SCA_AUTH,
            self::SCA_RULE_DO_NOT_USE_SCA,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['card_type'] = isset($data['card_type']) ? $data['card_type'] : null;
        $this->container['sca_rule'] = isset($data['sca_rule']) ? $data['sca_rule'] : null;
        $this->container['sca_fallback'] = isset($data['sca_fallback']) ? $data['sca_fallback'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCardTypeAllowableValues();
        if (!is_null($this->container['card_type']) && !in_array($this->container['card_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'card_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScaRuleAllowableValues();
        if (!is_null($this->container['sca_rule']) && !in_array($this->container['sca_rule'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sca_rule', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string $card_type card_type
     *
     * @return $this
     */
    public function setCardType($card_type)
    {
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!is_null($card_type) && !in_array($card_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'card_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets sca_rule
     *
     * @return string
     */
    public function getScaRule()
    {
        return $this->container['sca_rule'];
    }

    /**
     * Sets sca_rule
     *
     * @param string $sca_rule sca_rule
     *
     * @return $this
     */
    public function setScaRule($sca_rule)
    {
        $allowedValues = $this->getScaRuleAllowableValues();
        if (!is_null($sca_rule) && !in_array($sca_rule, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sca_rule', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sca_rule'] = $sca_rule;

        return $this;
    }

    /**
     * Gets sca_fallback
     *
     * @return bool
     */
    public function getScaFallback()
    {
        return $this->container['sca_fallback'];
    }

    /**
     * Sets sca_fallback
     *
     * @param bool $sca_fallback sca_fallback
     *
     * @return $this
     */
    public function setScaFallback($sca_fallback)
    {
        $this->container['sca_fallback'] = $sca_fallback;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


