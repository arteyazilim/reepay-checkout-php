<?php
/**
 * SignupPage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SignupPage Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SignupPage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SignupPage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'plan' => 'string',
        'locale' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'address' => 'string',
        'company' => 'string',
        'city' => 'string',
        'coupon' => 'string',
        'id' => 'string',
        'url' => 'string',
        'created' => '\DateTime',
        'accept_url' => 'string',
        'cancel_url' => 'string',
        'payment_methods' => 'string[]',
        'subscription_configuration' => '\Swagger\Client\Model\CreateSubscription',
        'first_name' => 'string',
        'last_name' => 'string',
        'postal_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'plan' => null,
        'locale' => null,
        'email' => null,
        'phone' => null,
        'address' => null,
        'company' => null,
        'city' => null,
        'coupon' => null,
        'id' => null,
        'url' => null,
        'created' => 'date-time',
        'accept_url' => null,
        'cancel_url' => null,
        'payment_methods' => null,
        'subscription_configuration' => null,
        'first_name' => null,
        'last_name' => null,
        'postal_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'plan' => 'plan',
        'locale' => 'locale',
        'email' => 'email',
        'phone' => 'phone',
        'address' => 'address',
        'company' => 'company',
        'city' => 'city',
        'coupon' => 'coupon',
        'id' => 'id',
        'url' => 'url',
        'created' => 'created',
        'accept_url' => 'accept_url',
        'cancel_url' => 'cancel_url',
        'payment_methods' => 'payment_methods',
        'subscription_configuration' => 'subscription_configuration',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'postal_code' => 'postal_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'plan' => 'setPlan',
        'locale' => 'setLocale',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'address' => 'setAddress',
        'company' => 'setCompany',
        'city' => 'setCity',
        'coupon' => 'setCoupon',
        'id' => 'setId',
        'url' => 'setUrl',
        'created' => 'setCreated',
        'accept_url' => 'setAcceptUrl',
        'cancel_url' => 'setCancelUrl',
        'payment_methods' => 'setPaymentMethods',
        'subscription_configuration' => 'setSubscriptionConfiguration',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'postal_code' => 'setPostalCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'plan' => 'getPlan',
        'locale' => 'getLocale',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'address' => 'getAddress',
        'company' => 'getCompany',
        'city' => 'getCity',
        'coupon' => 'getCoupon',
        'id' => 'getId',
        'url' => 'getUrl',
        'created' => 'getCreated',
        'accept_url' => 'getAcceptUrl',
        'cancel_url' => 'getCancelUrl',
        'payment_methods' => 'getPaymentMethods',
        'subscription_configuration' => 'getSubscriptionConfiguration',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'postal_code' => 'getPostalCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EMAIL_HIDDEN = 'HIDDEN';
    const EMAIL_OPTIONAL = 'OPTIONAL';
    const EMAIL_MANDATORY = 'MANDATORY';
    const PHONE_HIDDEN = 'HIDDEN';
    const PHONE_OPTIONAL = 'OPTIONAL';
    const PHONE_MANDATORY = 'MANDATORY';
    const ADDRESS_HIDDEN = 'HIDDEN';
    const ADDRESS_OPTIONAL = 'OPTIONAL';
    const ADDRESS_MANDATORY = 'MANDATORY';
    const COMPANY_HIDDEN = 'HIDDEN';
    const COMPANY_OPTIONAL = 'OPTIONAL';
    const COMPANY_MANDATORY = 'MANDATORY';
    const CITY_HIDDEN = 'HIDDEN';
    const CITY_OPTIONAL = 'OPTIONAL';
    const CITY_MANDATORY = 'MANDATORY';
    const COUPON_HIDDEN = 'HIDDEN';
    const COUPON_OPTIONAL = 'OPTIONAL';
    const COUPON_MANDATORY = 'MANDATORY';
    const FIRST_NAME_HIDDEN = 'HIDDEN';
    const FIRST_NAME_OPTIONAL = 'OPTIONAL';
    const FIRST_NAME_MANDATORY = 'MANDATORY';
    const LAST_NAME_HIDDEN = 'HIDDEN';
    const LAST_NAME_OPTIONAL = 'OPTIONAL';
    const LAST_NAME_MANDATORY = 'MANDATORY';
    const POSTAL_CODE_HIDDEN = 'HIDDEN';
    const POSTAL_CODE_OPTIONAL = 'OPTIONAL';
    const POSTAL_CODE_MANDATORY = 'MANDATORY';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmailAllowableValues()
    {
        return [
            self::EMAIL_HIDDEN,
            self::EMAIL_OPTIONAL,
            self::EMAIL_MANDATORY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPhoneAllowableValues()
    {
        return [
            self::PHONE_HIDDEN,
            self::PHONE_OPTIONAL,
            self::PHONE_MANDATORY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddressAllowableValues()
    {
        return [
            self::ADDRESS_HIDDEN,
            self::ADDRESS_OPTIONAL,
            self::ADDRESS_MANDATORY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCompanyAllowableValues()
    {
        return [
            self::COMPANY_HIDDEN,
            self::COMPANY_OPTIONAL,
            self::COMPANY_MANDATORY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCityAllowableValues()
    {
        return [
            self::CITY_HIDDEN,
            self::CITY_OPTIONAL,
            self::CITY_MANDATORY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCouponAllowableValues()
    {
        return [
            self::COUPON_HIDDEN,
            self::COUPON_OPTIONAL,
            self::COUPON_MANDATORY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFirstNameAllowableValues()
    {
        return [
            self::FIRST_NAME_HIDDEN,
            self::FIRST_NAME_OPTIONAL,
            self::FIRST_NAME_MANDATORY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLastNameAllowableValues()
    {
        return [
            self::LAST_NAME_HIDDEN,
            self::LAST_NAME_OPTIONAL,
            self::LAST_NAME_MANDATORY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPostalCodeAllowableValues()
    {
        return [
            self::POSTAL_CODE_HIDDEN,
            self::POSTAL_CODE_OPTIONAL,
            self::POSTAL_CODE_MANDATORY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['plan'] = isset($data['plan']) ? $data['plan'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['coupon'] = isset($data['coupon']) ? $data['coupon'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['accept_url'] = isset($data['accept_url']) ? $data['accept_url'] : null;
        $this->container['cancel_url'] = isset($data['cancel_url']) ? $data['cancel_url'] : null;
        $this->container['payment_methods'] = isset($data['payment_methods']) ? $data['payment_methods'] : null;
        $this->container['subscription_configuration'] = isset($data['subscription_configuration']) ? $data['subscription_configuration'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['plan'] === null) {
            $invalidProperties[] = "'plan' can't be null";
        }
        $allowedValues = $this->getEmailAllowableValues();
        if (!is_null($this->container['email']) && !in_array($this->container['email'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'email', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPhoneAllowableValues();
        if (!is_null($this->container['phone']) && !in_array($this->container['phone'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'phone', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAddressAllowableValues();
        if (!is_null($this->container['address']) && !in_array($this->container['address'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'address', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCompanyAllowableValues();
        if (!is_null($this->container['company']) && !in_array($this->container['company'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'company', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCityAllowableValues();
        if (!is_null($this->container['city']) && !in_array($this->container['city'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'city', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCouponAllowableValues();
        if (!is_null($this->container['coupon']) && !in_array($this->container['coupon'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'coupon', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        $allowedValues = $this->getFirstNameAllowableValues();
        if (!is_null($this->container['first_name']) && !in_array($this->container['first_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'first_name', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLastNameAllowableValues();
        if (!is_null($this->container['last_name']) && !in_array($this->container['last_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'last_name', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPostalCodeAllowableValues();
        if (!is_null($this->container['postal_code']) && !in_array($this->container['postal_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'postal_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets plan
     *
     * @return string
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param string $plan Subscription plan
     *
     * @return $this
     */
    public function setPlan($plan)
    {
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale Optional locale. E.g. `en_GB`, `da_DK`, `es_ES`. Defaults to configuration locale or account locale.
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Field configuration
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $allowedValues = $this->getEmailAllowableValues();
        if (!is_null($email) && !in_array($email, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'email', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Field configuration
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $allowedValues = $this->getPhoneAllowableValues();
        if (!is_null($phone) && !in_array($phone, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'phone', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Field configuration
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $allowedValues = $this->getAddressAllowableValues();
        if (!is_null($address) && !in_array($address, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'address', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string $company Field configuration
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $allowedValues = $this->getCompanyAllowableValues();
        if (!is_null($company) && !in_array($company, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'company', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city Field configuration
     *
     * @return $this
     */
    public function setCity($city)
    {
        $allowedValues = $this->getCityAllowableValues();
        if (!is_null($city) && !in_array($city, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'city', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets coupon
     *
     * @return string
     */
    public function getCoupon()
    {
        return $this->container['coupon'];
    }

    /**
     * Sets coupon
     *
     * @param string $coupon Field configuration
     *
     * @return $this
     */
    public function setCoupon($coupon)
    {
        $allowedValues = $this->getCouponAllowableValues();
        if (!is_null($coupon) && !in_array($coupon, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'coupon', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['coupon'] = $coupon;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Checkout sign-up page id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Checkout sign-up page url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Created date
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets accept_url
     *
     * @return string
     */
    public function getAcceptUrl()
    {
        return $this->container['accept_url'];
    }

    /**
     * Sets accept_url
     *
     * @param string $accept_url Redirect to this url after successful signup
     *
     * @return $this
     */
    public function setAcceptUrl($accept_url)
    {
        $this->container['accept_url'] = $accept_url;

        return $this;
    }

    /**
     * Gets cancel_url
     *
     * @return string
     */
    public function getCancelUrl()
    {
        return $this->container['cancel_url'];
    }

    /**
     * Sets cancel_url
     *
     * @param string $cancel_url Redirect to this url if the customer cancels sign-up
     *
     * @return $this
     */
    public function setCancelUrl($cancel_url)
    {
        $this->container['cancel_url'] = $cancel_url;

        return $this;
    }

    /**
     * Gets payment_methods
     *
     * @return string[]
     */
    public function getPaymentMethods()
    {
        return $this->container['payment_methods'];
    }

    /**
     * Sets payment_methods
     *
     * @param string[] $payment_methods Optional list of payment methods to present to customer. Format: <payment_methods> = list of <payment_method> <payment_method>  = [sca-|nosca-]<payment_name> <payment_name>    = The id of payment method, e.g. dankort See https://docs.reepay.com/docs/checkout-payment-methods for full documentation
     *
     * @return $this
     */
    public function setPaymentMethods($payment_methods)
    {
        $this->container['payment_methods'] = $payment_methods;

        return $this;
    }

    /**
     * Gets subscription_configuration
     *
     * @return \Swagger\Client\Model\CreateSubscription
     */
    public function getSubscriptionConfiguration()
    {
        return $this->container['subscription_configuration'];
    }

    /**
     * Sets subscription_configuration
     *
     * @param \Swagger\Client\Model\CreateSubscription $subscription_configuration Configuration configuration
     *
     * @return $this
     */
    public function setSubscriptionConfiguration($subscription_configuration)
    {
        $this->container['subscription_configuration'] = $subscription_configuration;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name Field configuration
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $allowedValues = $this->getFirstNameAllowableValues();
        if (!is_null($first_name) && !in_array($first_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'first_name', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Field configuration
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $allowedValues = $this->getLastNameAllowableValues();
        if (!is_null($last_name) && !in_array($last_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'last_name', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code Field configuration
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $allowedValues = $this->getPostalCodeAllowableValues();
        if (!is_null($postal_code) && !in_array($postal_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'postal_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['postal_code'] = $postal_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


