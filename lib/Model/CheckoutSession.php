<?php
/**
 * CheckoutSession
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CheckoutSession Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CheckoutSession implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CheckoutSession';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'type' => 'string',
        'result' => 'string',
        'error_code' => 'int',
        'error_message' => 'string',
        'logo' => 'string',
        'configuration' => 'string',
        'locale' => 'string',
        'cancel_url' => 'string',
        'accept_url' => 'string',
        'payment_methods' => '\Swagger\Client\Model\SessionPaymentMethods',
        'subscription_invoice' => '\Swagger\Client\Model\Invoice',
        'account' => '\Swagger\Client\Model\Account',
        'charge' => '\Swagger\Client\Model\Charge',
        'customer' => '\Swagger\Client\Model\Customer',
        'subscription' => '\Swagger\Client\Model\Subscription',
        'plan' => '\Swagger\Client\Model\Plan',
        'add_ons' => '\Swagger\Client\Model\SubscriptionAddOn[]',
        'discounts' => '\Swagger\Client\Model\SubscriptionDiscount[]',
        'subscription_payment_methods' => '\Swagger\Client\Model\PaymentMethods',
        'recurring' => 'bool',
        'settle' => 'bool',
        'pkey' => 'string',
        'strong_auth' => '\Swagger\Client\Model\StrongAuth',
        'payment_method' => 'string',
        'pgw_url' => 'string',
        'mpo_url' => 'string',
        'mpo_session_token' => 'string',
        'mpo_version' => 'string',
        'viabill_url' => 'string',
        'resurs_url' => 'string',
        'applepay_payment_request' => '\Swagger\Client\Model\ApplepayPaymentRequestDto',
        'googlepay_payment_request' => '\Swagger\Client\Model\GooglepayPaymentRequestDto',
        'paypal_client_id' => 'string',
        'paypal_payment_request' => 'map[string,object]',
        'paypal_auth_url' => 'string',
        'button_text' => 'string',
        'show_subscription_details' => 'bool',
        'show_terms' => 'bool',
        'card_on_file' => '\Swagger\Client\Model\CardOnFile'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'type' => null,
        'result' => null,
        'error_code' => 'int32',
        'error_message' => null,
        'logo' => null,
        'configuration' => null,
        'locale' => null,
        'cancel_url' => null,
        'accept_url' => null,
        'payment_methods' => null,
        'subscription_invoice' => null,
        'account' => null,
        'charge' => null,
        'customer' => null,
        'subscription' => null,
        'plan' => null,
        'add_ons' => null,
        'discounts' => null,
        'subscription_payment_methods' => null,
        'recurring' => null,
        'settle' => null,
        'pkey' => null,
        'strong_auth' => null,
        'payment_method' => null,
        'pgw_url' => null,
        'mpo_url' => null,
        'mpo_session_token' => null,
        'mpo_version' => null,
        'viabill_url' => null,
        'resurs_url' => null,
        'applepay_payment_request' => null,
        'googlepay_payment_request' => null,
        'paypal_client_id' => null,
        'paypal_payment_request' => null,
        'paypal_auth_url' => null,
        'button_text' => null,
        'show_subscription_details' => null,
        'show_terms' => null,
        'card_on_file' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'result' => 'result',
        'error_code' => 'errorCode',
        'error_message' => 'errorMessage',
        'logo' => 'logo',
        'configuration' => 'configuration',
        'locale' => 'locale',
        'cancel_url' => 'cancelUrl',
        'accept_url' => 'acceptUrl',
        'payment_methods' => 'paymentMethods',
        'subscription_invoice' => 'subscriptionInvoice',
        'account' => 'account',
        'charge' => 'charge',
        'customer' => 'customer',
        'subscription' => 'subscription',
        'plan' => 'plan',
        'add_ons' => 'addOns',
        'discounts' => 'discounts',
        'subscription_payment_methods' => 'subscriptionPaymentMethods',
        'recurring' => 'recurring',
        'settle' => 'settle',
        'pkey' => 'pkey',
        'strong_auth' => 'strongAuth',
        'payment_method' => 'paymentMethod',
        'pgw_url' => 'pgwUrl',
        'mpo_url' => 'mpoUrl',
        'mpo_session_token' => 'mpoSessionToken',
        'mpo_version' => 'mpoVersion',
        'viabill_url' => 'viabillUrl',
        'resurs_url' => 'resursUrl',
        'applepay_payment_request' => 'applepayPaymentRequest',
        'googlepay_payment_request' => 'googlepayPaymentRequest',
        'paypal_client_id' => 'paypalClientId',
        'paypal_payment_request' => 'paypalPaymentRequest',
        'paypal_auth_url' => 'paypalAuthUrl',
        'button_text' => 'buttonText',
        'show_subscription_details' => 'showSubscriptionDetails',
        'show_terms' => 'showTerms',
        'card_on_file' => 'cardOnFile'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'result' => 'setResult',
        'error_code' => 'setErrorCode',
        'error_message' => 'setErrorMessage',
        'logo' => 'setLogo',
        'configuration' => 'setConfiguration',
        'locale' => 'setLocale',
        'cancel_url' => 'setCancelUrl',
        'accept_url' => 'setAcceptUrl',
        'payment_methods' => 'setPaymentMethods',
        'subscription_invoice' => 'setSubscriptionInvoice',
        'account' => 'setAccount',
        'charge' => 'setCharge',
        'customer' => 'setCustomer',
        'subscription' => 'setSubscription',
        'plan' => 'setPlan',
        'add_ons' => 'setAddOns',
        'discounts' => 'setDiscounts',
        'subscription_payment_methods' => 'setSubscriptionPaymentMethods',
        'recurring' => 'setRecurring',
        'settle' => 'setSettle',
        'pkey' => 'setPkey',
        'strong_auth' => 'setStrongAuth',
        'payment_method' => 'setPaymentMethod',
        'pgw_url' => 'setPgwUrl',
        'mpo_url' => 'setMpoUrl',
        'mpo_session_token' => 'setMpoSessionToken',
        'mpo_version' => 'setMpoVersion',
        'viabill_url' => 'setViabillUrl',
        'resurs_url' => 'setResursUrl',
        'applepay_payment_request' => 'setApplepayPaymentRequest',
        'googlepay_payment_request' => 'setGooglepayPaymentRequest',
        'paypal_client_id' => 'setPaypalClientId',
        'paypal_payment_request' => 'setPaypalPaymentRequest',
        'paypal_auth_url' => 'setPaypalAuthUrl',
        'button_text' => 'setButtonText',
        'show_subscription_details' => 'setShowSubscriptionDetails',
        'show_terms' => 'setShowTerms',
        'card_on_file' => 'setCardOnFile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'result' => 'getResult',
        'error_code' => 'getErrorCode',
        'error_message' => 'getErrorMessage',
        'logo' => 'getLogo',
        'configuration' => 'getConfiguration',
        'locale' => 'getLocale',
        'cancel_url' => 'getCancelUrl',
        'accept_url' => 'getAcceptUrl',
        'payment_methods' => 'getPaymentMethods',
        'subscription_invoice' => 'getSubscriptionInvoice',
        'account' => 'getAccount',
        'charge' => 'getCharge',
        'customer' => 'getCustomer',
        'subscription' => 'getSubscription',
        'plan' => 'getPlan',
        'add_ons' => 'getAddOns',
        'discounts' => 'getDiscounts',
        'subscription_payment_methods' => 'getSubscriptionPaymentMethods',
        'recurring' => 'getRecurring',
        'settle' => 'getSettle',
        'pkey' => 'getPkey',
        'strong_auth' => 'getStrongAuth',
        'payment_method' => 'getPaymentMethod',
        'pgw_url' => 'getPgwUrl',
        'mpo_url' => 'getMpoUrl',
        'mpo_session_token' => 'getMpoSessionToken',
        'mpo_version' => 'getMpoVersion',
        'viabill_url' => 'getViabillUrl',
        'resurs_url' => 'getResursUrl',
        'applepay_payment_request' => 'getApplepayPaymentRequest',
        'googlepay_payment_request' => 'getGooglepayPaymentRequest',
        'paypal_client_id' => 'getPaypalClientId',
        'paypal_payment_request' => 'getPaypalPaymentRequest',
        'paypal_auth_url' => 'getPaypalAuthUrl',
        'button_text' => 'getButtonText',
        'show_subscription_details' => 'getShowSubscriptionDetails',
        'show_terms' => 'getShowTerms',
        'card_on_file' => 'getCardOnFile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_CHARGE = 'CHARGE';
    const TYPE_RECURRING = 'RECURRING';
    const TYPE_SUBSCRIPTION = 'SUBSCRIPTION';
    const TYPE_SUBSCRIPTION_CHARGE = 'SUBSCRIPTION_CHARGE';
    const RESULT_SUCCESS = 'SUCCESS';
    const RESULT_SESSION_DELETED = 'SESSION_DELETED';
    const RESULT_SESSION_EXPIRED = 'SESSION_EXPIRED';
    const RESULT_CHARGE_FAILURE = 'CHARGE_FAILURE';
    const RESULT_CHARGE_CARD_TOKEN_EXPIRED = 'CHARGE_CARD_TOKEN_EXPIRED';
    const RESULT_NO_PAYMENT_METHODS = 'NO_PAYMENT_METHODS';
    const RESULT_REEPAY_ERROR = 'REEPAY_ERROR';
    const RESULT_CAPACITY_ERROR = 'CAPACITY_ERROR';
    const RESULT_INTERNAL_ERROR = 'INTERNAL_ERROR';
    const RESULT_INVOICE_ALREADY_PAID = 'INVOICE_ALREADY_PAID';
    const RESULT_INVOICE_CANCELLED = 'INVOICE_CANCELLED';
    const RESULT_PAYMENT_METHOD_ALREADY_ADDED = 'PAYMENT_METHOD_ALREADY_ADDED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CHARGE,
            self::TYPE_RECURRING,
            self::TYPE_SUBSCRIPTION,
            self::TYPE_SUBSCRIPTION_CHARGE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResultAllowableValues()
    {
        return [
            self::RESULT_SUCCESS,
            self::RESULT_SESSION_DELETED,
            self::RESULT_SESSION_EXPIRED,
            self::RESULT_CHARGE_FAILURE,
            self::RESULT_CHARGE_CARD_TOKEN_EXPIRED,
            self::RESULT_NO_PAYMENT_METHODS,
            self::RESULT_REEPAY_ERROR,
            self::RESULT_CAPACITY_ERROR,
            self::RESULT_INTERNAL_ERROR,
            self::RESULT_INVOICE_ALREADY_PAID,
            self::RESULT_INVOICE_CANCELLED,
            self::RESULT_PAYMENT_METHOD_ALREADY_ADDED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['error_code'] = isset($data['error_code']) ? $data['error_code'] : null;
        $this->container['error_message'] = isset($data['error_message']) ? $data['error_message'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['configuration'] = isset($data['configuration']) ? $data['configuration'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['cancel_url'] = isset($data['cancel_url']) ? $data['cancel_url'] : null;
        $this->container['accept_url'] = isset($data['accept_url']) ? $data['accept_url'] : null;
        $this->container['payment_methods'] = isset($data['payment_methods']) ? $data['payment_methods'] : null;
        $this->container['subscription_invoice'] = isset($data['subscription_invoice']) ? $data['subscription_invoice'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['charge'] = isset($data['charge']) ? $data['charge'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : null;
        $this->container['plan'] = isset($data['plan']) ? $data['plan'] : null;
        $this->container['add_ons'] = isset($data['add_ons']) ? $data['add_ons'] : null;
        $this->container['discounts'] = isset($data['discounts']) ? $data['discounts'] : null;
        $this->container['subscription_payment_methods'] = isset($data['subscription_payment_methods']) ? $data['subscription_payment_methods'] : null;
        $this->container['recurring'] = isset($data['recurring']) ? $data['recurring'] : null;
        $this->container['settle'] = isset($data['settle']) ? $data['settle'] : null;
        $this->container['pkey'] = isset($data['pkey']) ? $data['pkey'] : null;
        $this->container['strong_auth'] = isset($data['strong_auth']) ? $data['strong_auth'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['pgw_url'] = isset($data['pgw_url']) ? $data['pgw_url'] : null;
        $this->container['mpo_url'] = isset($data['mpo_url']) ? $data['mpo_url'] : null;
        $this->container['mpo_session_token'] = isset($data['mpo_session_token']) ? $data['mpo_session_token'] : null;
        $this->container['mpo_version'] = isset($data['mpo_version']) ? $data['mpo_version'] : null;
        $this->container['viabill_url'] = isset($data['viabill_url']) ? $data['viabill_url'] : null;
        $this->container['resurs_url'] = isset($data['resurs_url']) ? $data['resurs_url'] : null;
        $this->container['applepay_payment_request'] = isset($data['applepay_payment_request']) ? $data['applepay_payment_request'] : null;
        $this->container['googlepay_payment_request'] = isset($data['googlepay_payment_request']) ? $data['googlepay_payment_request'] : null;
        $this->container['paypal_client_id'] = isset($data['paypal_client_id']) ? $data['paypal_client_id'] : null;
        $this->container['paypal_payment_request'] = isset($data['paypal_payment_request']) ? $data['paypal_payment_request'] : null;
        $this->container['paypal_auth_url'] = isset($data['paypal_auth_url']) ? $data['paypal_auth_url'] : null;
        $this->container['button_text'] = isset($data['button_text']) ? $data['button_text'] : null;
        $this->container['show_subscription_details'] = isset($data['show_subscription_details']) ? $data['show_subscription_details'] : null;
        $this->container['show_terms'] = isset($data['show_terms']) ? $data['show_terms'] : null;
        $this->container['card_on_file'] = isset($data['card_on_file']) ? $data['card_on_file'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResultAllowableValues();
        if (!is_null($this->container['result']) && !in_array($this->container['result'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'result', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['locale'] === null) {
            $invalidProperties[] = "'locale' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Session id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Session type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string $result result
     *
     * @return $this
     */
    public function setResult($result)
    {
        $allowedValues = $this->getResultAllowableValues();
        if (!is_null($result) && !in_array($result, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'result', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return int
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param int $error_code error_code
     *
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string $error_message error_message
     *
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string $logo logo
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return string
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param string $configuration configuration
     *
     * @return $this
     */
    public function setConfiguration($configuration)
    {
        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale Session locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets cancel_url
     *
     * @return string
     */
    public function getCancelUrl()
    {
        return $this->container['cancel_url'];
    }

    /**
     * Sets cancel_url
     *
     * @param string $cancel_url cancel_url
     *
     * @return $this
     */
    public function setCancelUrl($cancel_url)
    {
        $this->container['cancel_url'] = $cancel_url;

        return $this;
    }

    /**
     * Gets accept_url
     *
     * @return string
     */
    public function getAcceptUrl()
    {
        return $this->container['accept_url'];
    }

    /**
     * Sets accept_url
     *
     * @param string $accept_url accept_url
     *
     * @return $this
     */
    public function setAcceptUrl($accept_url)
    {
        $this->container['accept_url'] = $accept_url;

        return $this;
    }

    /**
     * Gets payment_methods
     *
     * @return \Swagger\Client\Model\SessionPaymentMethods
     */
    public function getPaymentMethods()
    {
        return $this->container['payment_methods'];
    }

    /**
     * Sets payment_methods
     *
     * @param \Swagger\Client\Model\SessionPaymentMethods $payment_methods payment_methods
     *
     * @return $this
     */
    public function setPaymentMethods($payment_methods)
    {
        $this->container['payment_methods'] = $payment_methods;

        return $this;
    }

    /**
     * Gets subscription_invoice
     *
     * @return \Swagger\Client\Model\Invoice
     */
    public function getSubscriptionInvoice()
    {
        return $this->container['subscription_invoice'];
    }

    /**
     * Sets subscription_invoice
     *
     * @param \Swagger\Client\Model\Invoice $subscription_invoice subscription_invoice
     *
     * @return $this
     */
    public function setSubscriptionInvoice($subscription_invoice)
    {
        $this->container['subscription_invoice'] = $subscription_invoice;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \Swagger\Client\Model\Account
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \Swagger\Client\Model\Account $account account
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets charge
     *
     * @return \Swagger\Client\Model\Charge
     */
    public function getCharge()
    {
        return $this->container['charge'];
    }

    /**
     * Sets charge
     *
     * @param \Swagger\Client\Model\Charge $charge charge
     *
     * @return $this
     */
    public function setCharge($charge)
    {
        $this->container['charge'] = $charge;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Swagger\Client\Model\Customer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Swagger\Client\Model\Customer $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets subscription
     *
     * @return \Swagger\Client\Model\Subscription
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param \Swagger\Client\Model\Subscription $subscription subscription
     *
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return \Swagger\Client\Model\Plan
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param \Swagger\Client\Model\Plan $plan plan
     *
     * @return $this
     */
    public function setPlan($plan)
    {
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets add_ons
     *
     * @return \Swagger\Client\Model\SubscriptionAddOn[]
     */
    public function getAddOns()
    {
        return $this->container['add_ons'];
    }

    /**
     * Sets add_ons
     *
     * @param \Swagger\Client\Model\SubscriptionAddOn[] $add_ons add_ons
     *
     * @return $this
     */
    public function setAddOns($add_ons)
    {
        $this->container['add_ons'] = $add_ons;

        return $this;
    }

    /**
     * Gets discounts
     *
     * @return \Swagger\Client\Model\SubscriptionDiscount[]
     */
    public function getDiscounts()
    {
        return $this->container['discounts'];
    }

    /**
     * Sets discounts
     *
     * @param \Swagger\Client\Model\SubscriptionDiscount[] $discounts discounts
     *
     * @return $this
     */
    public function setDiscounts($discounts)
    {
        $this->container['discounts'] = $discounts;

        return $this;
    }

    /**
     * Gets subscription_payment_methods
     *
     * @return \Swagger\Client\Model\PaymentMethods
     */
    public function getSubscriptionPaymentMethods()
    {
        return $this->container['subscription_payment_methods'];
    }

    /**
     * Sets subscription_payment_methods
     *
     * @param \Swagger\Client\Model\PaymentMethods $subscription_payment_methods subscription_payment_methods
     *
     * @return $this
     */
    public function setSubscriptionPaymentMethods($subscription_payment_methods)
    {
        $this->container['subscription_payment_methods'] = $subscription_payment_methods;

        return $this;
    }

    /**
     * Gets recurring
     *
     * @return bool
     */
    public function getRecurring()
    {
        return $this->container['recurring'];
    }

    /**
     * Sets recurring
     *
     * @param bool $recurring recurring
     *
     * @return $this
     */
    public function setRecurring($recurring)
    {
        $this->container['recurring'] = $recurring;

        return $this;
    }

    /**
     * Gets settle
     *
     * @return bool
     */
    public function getSettle()
    {
        return $this->container['settle'];
    }

    /**
     * Sets settle
     *
     * @param bool $settle settle
     *
     * @return $this
     */
    public function setSettle($settle)
    {
        $this->container['settle'] = $settle;

        return $this;
    }

    /**
     * Gets pkey
     *
     * @return string
     */
    public function getPkey()
    {
        return $this->container['pkey'];
    }

    /**
     * Sets pkey
     *
     * @param string $pkey pkey
     *
     * @return $this
     */
    public function setPkey($pkey)
    {
        $this->container['pkey'] = $pkey;

        return $this;
    }

    /**
     * Gets strong_auth
     *
     * @return \Swagger\Client\Model\StrongAuth
     */
    public function getStrongAuth()
    {
        return $this->container['strong_auth'];
    }

    /**
     * Sets strong_auth
     *
     * @param \Swagger\Client\Model\StrongAuth $strong_auth strong_auth
     *
     * @return $this
     */
    public function setStrongAuth($strong_auth)
    {
        $this->container['strong_auth'] = $strong_auth;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method payment_method
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets pgw_url
     *
     * @return string
     */
    public function getPgwUrl()
    {
        return $this->container['pgw_url'];
    }

    /**
     * Sets pgw_url
     *
     * @param string $pgw_url pgw_url
     *
     * @return $this
     */
    public function setPgwUrl($pgw_url)
    {
        $this->container['pgw_url'] = $pgw_url;

        return $this;
    }

    /**
     * Gets mpo_url
     *
     * @return string
     */
    public function getMpoUrl()
    {
        return $this->container['mpo_url'];
    }

    /**
     * Sets mpo_url
     *
     * @param string $mpo_url mpo_url
     *
     * @return $this
     */
    public function setMpoUrl($mpo_url)
    {
        $this->container['mpo_url'] = $mpo_url;

        return $this;
    }

    /**
     * Gets mpo_session_token
     *
     * @return string
     */
    public function getMpoSessionToken()
    {
        return $this->container['mpo_session_token'];
    }

    /**
     * Sets mpo_session_token
     *
     * @param string $mpo_session_token mpo_session_token
     *
     * @return $this
     */
    public function setMpoSessionToken($mpo_session_token)
    {
        $this->container['mpo_session_token'] = $mpo_session_token;

        return $this;
    }

    /**
     * Gets mpo_version
     *
     * @return string
     */
    public function getMpoVersion()
    {
        return $this->container['mpo_version'];
    }

    /**
     * Sets mpo_version
     *
     * @param string $mpo_version mpo_version
     *
     * @return $this
     */
    public function setMpoVersion($mpo_version)
    {
        $this->container['mpo_version'] = $mpo_version;

        return $this;
    }

    /**
     * Gets viabill_url
     *
     * @return string
     */
    public function getViabillUrl()
    {
        return $this->container['viabill_url'];
    }

    /**
     * Sets viabill_url
     *
     * @param string $viabill_url viabill_url
     *
     * @return $this
     */
    public function setViabillUrl($viabill_url)
    {
        $this->container['viabill_url'] = $viabill_url;

        return $this;
    }

    /**
     * Gets resurs_url
     *
     * @return string
     */
    public function getResursUrl()
    {
        return $this->container['resurs_url'];
    }

    /**
     * Sets resurs_url
     *
     * @param string $resurs_url resurs_url
     *
     * @return $this
     */
    public function setResursUrl($resurs_url)
    {
        $this->container['resurs_url'] = $resurs_url;

        return $this;
    }

    /**
     * Gets applepay_payment_request
     *
     * @return \Swagger\Client\Model\ApplepayPaymentRequestDto
     */
    public function getApplepayPaymentRequest()
    {
        return $this->container['applepay_payment_request'];
    }

    /**
     * Sets applepay_payment_request
     *
     * @param \Swagger\Client\Model\ApplepayPaymentRequestDto $applepay_payment_request applepay_payment_request
     *
     * @return $this
     */
    public function setApplepayPaymentRequest($applepay_payment_request)
    {
        $this->container['applepay_payment_request'] = $applepay_payment_request;

        return $this;
    }

    /**
     * Gets googlepay_payment_request
     *
     * @return \Swagger\Client\Model\GooglepayPaymentRequestDto
     */
    public function getGooglepayPaymentRequest()
    {
        return $this->container['googlepay_payment_request'];
    }

    /**
     * Sets googlepay_payment_request
     *
     * @param \Swagger\Client\Model\GooglepayPaymentRequestDto $googlepay_payment_request googlepay_payment_request
     *
     * @return $this
     */
    public function setGooglepayPaymentRequest($googlepay_payment_request)
    {
        $this->container['googlepay_payment_request'] = $googlepay_payment_request;

        return $this;
    }

    /**
     * Gets paypal_client_id
     *
     * @return string
     */
    public function getPaypalClientId()
    {
        return $this->container['paypal_client_id'];
    }

    /**
     * Sets paypal_client_id
     *
     * @param string $paypal_client_id paypal_client_id
     *
     * @return $this
     */
    public function setPaypalClientId($paypal_client_id)
    {
        $this->container['paypal_client_id'] = $paypal_client_id;

        return $this;
    }

    /**
     * Gets paypal_payment_request
     *
     * @return map[string,object]
     */
    public function getPaypalPaymentRequest()
    {
        return $this->container['paypal_payment_request'];
    }

    /**
     * Sets paypal_payment_request
     *
     * @param map[string,object] $paypal_payment_request paypal_payment_request
     *
     * @return $this
     */
    public function setPaypalPaymentRequest($paypal_payment_request)
    {
        $this->container['paypal_payment_request'] = $paypal_payment_request;

        return $this;
    }

    /**
     * Gets paypal_auth_url
     *
     * @return string
     */
    public function getPaypalAuthUrl()
    {
        return $this->container['paypal_auth_url'];
    }

    /**
     * Sets paypal_auth_url
     *
     * @param string $paypal_auth_url paypal_auth_url
     *
     * @return $this
     */
    public function setPaypalAuthUrl($paypal_auth_url)
    {
        $this->container['paypal_auth_url'] = $paypal_auth_url;

        return $this;
    }

    /**
     * Gets button_text
     *
     * @return string
     */
    public function getButtonText()
    {
        return $this->container['button_text'];
    }

    /**
     * Sets button_text
     *
     * @param string $button_text button_text
     *
     * @return $this
     */
    public function setButtonText($button_text)
    {
        $this->container['button_text'] = $button_text;

        return $this;
    }

    /**
     * Gets show_subscription_details
     *
     * @return bool
     */
    public function getShowSubscriptionDetails()
    {
        return $this->container['show_subscription_details'];
    }

    /**
     * Sets show_subscription_details
     *
     * @param bool $show_subscription_details show_subscription_details
     *
     * @return $this
     */
    public function setShowSubscriptionDetails($show_subscription_details)
    {
        $this->container['show_subscription_details'] = $show_subscription_details;

        return $this;
    }

    /**
     * Gets show_terms
     *
     * @return bool
     */
    public function getShowTerms()
    {
        return $this->container['show_terms'];
    }

    /**
     * Sets show_terms
     *
     * @param bool $show_terms show_terms
     *
     * @return $this
     */
    public function setShowTerms($show_terms)
    {
        $this->container['show_terms'] = $show_terms;

        return $this;
    }

    /**
     * Gets card_on_file
     *
     * @return \Swagger\Client\Model\CardOnFile
     */
    public function getCardOnFile()
    {
        return $this->container['card_on_file'];
    }

    /**
     * Sets card_on_file
     *
     * @param \Swagger\Client\Model\CardOnFile $card_on_file card_on_file
     *
     * @return $this
     */
    public function setCardOnFile($card_on_file)
    {
        $this->container['card_on_file'] = $card_on_file;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


